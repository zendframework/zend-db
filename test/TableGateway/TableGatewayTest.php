<?php
/**
 * Zend Framework (http://framework.zend.com/)
 *
 * @link      http://github.com/zendframework/zf2 for the canonical source repository
 * @copyright Copyright (c) 2005-2016 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace ZendTest\Db\TableGateway;

use Zend\Db\TableGateway\TableGateway;
use Zend\Db\TableGateway\Feature;
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\Sql\Insert;
use Zend\Db\Sql\Update;
use Zend\Db\Sql\Sql;
use Zend\Db\Sql\TableIdentifier;
use Zend\Db\Sql\TableSource;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-03-01 at 21:02:22.
 */
class TableGatewayTest extends \PHPUnit_Framework_TestCase
{
    protected $mockAdapter = null;

    public function setup()
    {
        // mock the adapter, driver, and parts
        $mockResult = $this->getMock('Zend\Db\Adapter\Driver\ResultInterface');
        $mockStatement = $this->getMock('Zend\Db\Adapter\Driver\StatementInterface');
        $mockStatement->expects($this->any())->method('execute')->will($this->returnValue($mockResult));
        $mockConnection = $this->getMock('Zend\Db\Adapter\Driver\ConnectionInterface');
        $mockDriver = $this->getMock('Zend\Db\Adapter\Driver\DriverInterface');
        $mockDriver->expects($this->any())->method('createStatement')->will($this->returnValue($mockStatement));
        $mockDriver->expects($this->any())->method('getConnection')->will($this->returnValue($mockConnection));

        // setup mock adapter
        $this->mockAdapter = $this->getMock('Zend\Db\Adapter\Adapter', null, [$mockDriver]);
    }

    /**
     * Beside other tests checks for plain string table identifier
     */
    public function testConstructor()
    {
        // constructor with only required args
        $table = new TableGateway(
            'foo',
            $this->mockAdapter
        );

        $this->assertEquals('foo', $table->getTable()->getSource()->getTable());
        $this->assertSame($this->mockAdapter, $table->getAdapter());
        $this->assertInstanceOf('Zend\Db\TableGateway\Feature\FeatureSet', $table->getFeatureSet());
        $this->assertInstanceOf('Zend\Db\ResultSet\ResultSet', $table->getResultSetPrototype());
        $this->assertInstanceOf('Zend\Db\Sql\Sql', $table->getSql());

        // injecting all args
        $table = new TableGateway(
            'foo',
            $this->mockAdapter,
            $featureSet = new Feature\FeatureSet,
            $resultSet = new ResultSet,
            $sql = new Sql($this->mockAdapter, 'foo')
        );

        $this->assertEquals('foo', $table->getTable()->getSource()->getTable());
        $this->assertSame($this->mockAdapter, $table->getAdapter());
        $this->assertSame($featureSet, $table->getFeatureSet());
        $this->assertSame($resultSet, $table->getResultSetPrototype());
        $this->assertSame($sql, $table->getSql());

        // constructor expects exception
        $this->setExpectedException(
            'Zend\Db\TableGateway\Exception\InvalidArgumentException',
            'Table name must be a string or an instance of Zend\Db\Sql\TableIdentifier'
        );
        new TableGateway(
            null,
            $this->mockAdapter
        );
    }

    /**
     * @group 6726
     * @group 6740
     */
    public function testTableAsString()
    {
        $ti = 'fooTable.barSchema';
        // constructor with only required args
        $table = new TableGateway(
            $ti,
            $this->mockAdapter
        );

        $this->assertEquals($ti, $table->getTable()->getSource()->getTable());
    }

    /**
     * @group 6726
     * @group 6740
     */
    public function testTableAsTableIdentifierObject()
    {
        $ti = new TableIdentifier('fooTable', 'barSchema');
        // constructor with only required args
        $table = new TableGateway(
            $ti,
            $this->mockAdapter
        );

        $this->assertEquals($ti, $table->getTable()->getSource());
    }

    /**
     * @group 6726
     * @group 6740
     */
    public function testTableAsAliasedTableIdentifierObject()
    {
        $aliasedTI = ['foo' => new TableIdentifier('fooTable', 'barSchema')];
        // constructor with only required args
        $table = new TableGateway(
            $aliasedTI,
            $this->mockAdapter
        );

        $this->assertEquals(
            ['foo', 'fooTable', 'barSchema'],
            [$table->getTable()->getAlias(), $table->getTable()->getSource()->getTable(), $table->getTable()->getSource()->getSchema()]
        );
    }

    public function aliasedTables()
    {
        $identifier = new TableIdentifier('Users');
        return [
            'simple-alias'     => [['U' => 'Users'], 'Users'],
            'identifier-alias' => [['U' => $identifier], $identifier],
        ];
    }

    /**
     * @group 7311
     * @dataProvider aliasedTables
     */
    public function testInsertShouldResetTableToUnaliasedTable($tableValue, $expected)
    {
        $phpunit = $this;

        $insert = new Insert();
        $insert->into($tableValue);

        $result = $this->getMockBuilder('Zend\Db\Adapter\Driver\ResultInterface')
            ->getMock();
        $result->expects($this->once())
            ->method('getAffectedRows')
            ->will($this->returnValue(1));

        $statement = $this->getMockBuilder('Zend\Db\Adapter\Driver\StatementInterface')
            ->getMock();
        $statement->expects($this->once())
            ->method('execute')
            ->will($this->returnValue($result));

        $statementExpectation = function ($insert) use ($phpunit, $expected, $statement) {
            if ($expected instanceof TableIdentifier) {
                $expected = $expected->getTable();
            }
            $phpunit->assertSame($expected, $insert->table->getSource()->getTable());
            return $statement;
        };

        $sql = $this->getMockBuilder('Zend\Db\Sql\Sql')
            ->disableOriginalConstructor()
            ->getMock();
        $sql->expects($this->atLeastOnce())
            ->method('getTable')
            ->will($this->returnValue(TableSource::factory($tableValue)->getSource()));
        $sql->expects($this->once())
            ->method('insert')
            ->will($this->returnValue($insert));
        $sql->expects($this->once())
            ->method('prepareSqlStatement')
            ->with($this->equalTo($insert))
            ->will($this->returnCallback($statementExpectation));

        $table = new TableGateway(
            $tableValue,
            $this->mockAdapter,
            null,
            null,
            $sql
        );

        $result = $table->insert([
            'foo' => 'FOO',
        ]);

        $this->assertInstanceOf('Zend\Db\Sql\TableSource', $insert->table);
        $this->assertEquals(
            TableSource::factory($tableValue),
            $insert->table
        );
    }

    /**
     * @dataProvider aliasedTables
     */
    public function testUpdateShouldResetTableToUnaliasedTable($tableValue, $expected)
    {
        $phpunit = $this;

        $update = new Update();
        $update->table($tableValue);

        $result = $this->getMockBuilder('Zend\Db\Adapter\Driver\ResultInterface')
            ->getMock();
        $result->expects($this->once())
            ->method('getAffectedRows')
            ->will($this->returnValue(1));

        $statement = $this->getMockBuilder('Zend\Db\Adapter\Driver\StatementInterface')
            ->getMock();
        $statement->expects($this->once())
            ->method('execute')
            ->will($this->returnValue($result));

        $statementExpectation = function ($update) use ($phpunit, $expected, $statement) {
            if ($expected instanceof TableIdentifier) {
                $expected = $expected->getTable();
            }
            $phpunit->assertSame($expected, $update->table->getSource()->getTable());
            return $statement;
        };

        $sql = $this->getMockBuilder('Zend\Db\Sql\Sql')
            ->disableOriginalConstructor()
            ->getMock();
        $sql->expects($this->atLeastOnce())
            ->method('getTable')
            ->will($this->returnValue(TableSource::factory($tableValue)->getSource()));
        $sql->expects($this->once())
            ->method('update')
            ->will($this->returnValue($update));
        $sql->expects($this->once())
            ->method('prepareSqlStatement')
            ->with($this->equalTo($update))
            ->will($this->returnCallback($statementExpectation));

        $table = new TableGateway(
            $tableValue,
            $this->mockAdapter,
            null,
            null,
            $sql
        );

        $result = $table->update([
            'foo' => 'FOO',
        ], [
            'bar' => 'BAR'
        ]);

        $this->assertInstanceOf('Zend\Db\Sql\TableSource', $update->table);
        $this->assertEquals(
            TableSource::factory($tableValue),
            $update->table
        );
    }
}
